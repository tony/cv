Tony Narlock's portfolio (last updated 2018-01-26)

I am really obsessed with faceting.

Patch

  in_re_url (issue)
  qa_url (pull request)
  diff_url
  date
  project
  languages ['python', 'js', 'none']
  minor [true/false]
  tags ['django']
  accepted [false/false]

Website
  name
  url
  start_year
  end_year

Project (dim projects only contributions to, and also sort by most to least contributions)
  license
  role
  name
  repo_url
  docs_url
  vcs_url
  license

Employer
  name
  url
  role
  responsibilities

Volunteer
  name
  url
  role
  bio

Achievement
  name
  place [object_type, id]
  date

Education
  name
  city
  state
  year_start
  year_end

Publications
  name
  read_url
  buy_url
  description

Shouts
  url
  mentioning [object_type, 'id']

- Filter by year (select one or multiple, or clear)
- Filter by project
- Filter by tag
- Filter by language
- Search
- Show Employers | Projects |
    Projects have Roles (Creator, Maintainer, Contributor), Items
      Roles:
        Created (creator)
        Maintained (maintainer)
      Items:
        Patches (contributor)
    Employers have Roles, Achievements
      Roles:
        Employed (employee)
      Items:
        Achievement (<trophy> winner)
    Clubs have Roles, Achievements
       Role:
         Member (member)
           title: president
       Items:
        Achievement (<trophy> winner)
    Publications
       Role:
         Author (author)
           title: author

    Kudos, Achievement, Patch,
    Exit, Released (created? published? updated? inherited?),
    Status (employed|maintainer|volunteer|owner)

- Role
    Title
    Start_month
    Start_year
    End_month
    End_year
    Place: [Project, Employer, Club, Website]
- Show / Hide minor (typos, formatting fixes)
- Create a range slider for date/timespans
- Filter by programming language
- add a d3 graph over time of patches/languages/etc
- add a d3 pie chart over time of patches/languages/etc
- Split data up into patches.json, kudos.json, etc
- create a languages.json, add python, js, C++, CMake
- Don't run moment.js on github script if mergedAt undefined/null
- Use checkboxes for certain special filters
- negate/allow switch for filtering
- Hide Spelling Contributions
- Hide Documentation Contributions
- Split off / filter-branch  cv to tony/cv
  Tony Narlock's Resume
- No results, uncheck filters to make sure you're not hiding results.
- rename 'project' to 'flossproject'
- Applications 'application'
- Software Libraries 'software_library'
- Sample Code  'sample_code'
- Websites 'website'
- For projects link to
  Repo URL, Docs_url, API_url, license,
  Travis_url, codecov_url, change log
- Sort by date, type, alphabet
- Fix project filtering, picking 1 filter for a project seems
  to filter all of them, only filter by special filters
  and activity types
- old structure notes:
  // subject
  // project, 'projects'
  // company, 'companies'
  // publication, 'publications'
  // club, 'clubs'

  // verb / actions
  // kudo, 'kudos'; // hn/reddit/blog/tweet/review
  // patch, 'patches' //  gh, bugzilla
  // status, 'status // role
  // achievement, 'achievements  // exit, cert
  // event, 'achievements' // released, started
  // presentation = 'presentations'

  // adjective
  // language, 'languages'
  // role, 'roles' // employee, volunteere, president
- created_date -> begin_date
- LanguageTag component
  accepts name of language, looks up color.
- add colors to tag programming languages multiselect
- fix width when inside multiselect (placeholder) while it's in
  selected state
- colors for project/place/company
- move data files into a general area
- vue/  react/
- parity notes:

  - use #root on both vue and react, or #app

    right now #app is on vue, and #root is on react
- When scrolling down, merge filters at top of screen.
- Unify filter/reducers into one select box
- On link:

  Yep. No random trivia for me. This counts as my technical screen.

  Check it out on GitHub!

  Want to interview / chat ? Send me an email!
- On filter selection, assure that selected{Languages,ActivityTypes,Actors} as in available{Languages,ActivityTypes,Actors}
