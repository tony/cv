name: Deploy

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: Extract Branch Name
      run: echo "BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
    - name: Filter changed file paths to outputs
      uses: dorny/paths-filter@v2.10.2
      id: changes
      with:
        filters: |
          root: &root
            - tsconfig.json
            - package.json
            - yarn.lock
          lib: &lib
            - 'packages/lib/**'
          sharedComponents: &sharedComponents
            - 'packages/ui-range-slider/**'
            - 'packages/ui-switch/**'
            - 'packages/ui/**'
          nav: &nav
            - 'packages/nav/**'
          data: &data
            - 'packages/data/**'
          common:
            - *root
            - *lib
            - *sharedComponents
            - *nav
            - *data
          angular:
            - 'packages/angular/**'
          vue:
            - 'packages/vue/**'
          react:
            - 'packages/react/**'
            - 'packages/chart-react-*/**'
    - name: Should publish
      if: steps.changes.outputs.angular == 'true' || steps.changes.outputs.react == 'true' || steps.changes.outputs.vue == 'true' || steps.changes.outputs.common == 'true'
      run: echo "PUBLISH=$(echo true)" >> $GITHUB_ENV
    - name: Set dest dir (branch)
      if: env.BRANCH != 'master'
      run: |
        echo "AWS_S3_DEST_DIR=dev/branch/${{ env.BRANCH }}" >> $GITHUB_ENV
        echo "AWS_CLOUDFRONT_INVALIDATION_PATHS=/dev/branch/${{ env.BRANCH }}/ /dev/branch/${{ env.BRANCH }}/index.html" >> $GITHUB_ENV
    - name: Set dest dir (master)
      if: env.BRANCH == 'master'
      run: |
        echo "AWS_S3_DEST_DIR=" >> $GITHUB_ENV
        echo "AWS_CLOUDFRONT_INVALIDATION_PATHS=/ /index.html" >> $GITHUB_ENV
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Yarn cache
      uses: actions/cache@v3
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
    - name: node_modules/ cache
      uses: actions/cache@v3
      id: node-modules-cache
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock') }}
    - name: Configure AWS Credentials
      if: env.PUBLISH == 'true'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Installing dependencies
      if: env.PUBLISH == 'true'
      run: yarn install --frozen-lockfile
    - name: pull gh repos
      if: env.PUBLISH == 'true'
      run: |
        env GITHUB_API_TOKEN=${{ secrets.CI_GITHUB_API_TOKEN }} yarn workspace @tony/cv-scripts run github
    - name: react
      if: env.PUBLISH == 'true' && (steps.changes.outputs.react == 'true' || steps.changes.outputs.common == 'true')
      run: |
        cd packages/react
        yarn build
    - name: vue
      if: env.PUBLISH == 'true' && (steps.changes.outputs.vue == 'true' || steps.changes.outputs.common == 'true')
      run: |
        cd packages/vue
        yarn build
    - name: angular
      if: env.PUBLISH == 'true' && (steps.changes.outputs.angular == 'true' || steps.changes.outputs.common == 'true')
      run: |
        cd packages/angular
        yarn build --prod --source-map
    - name: push to s3 (react)
      if: env.PUBLISH == 'true' && (steps.changes.outputs.react == 'true' || steps.changes.outputs.common == 'true')
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET_REACT_V2 }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SOURCE_DIR: 'packages/react/dist/'
        DEST_DIR: ${{ env.AWS_S3_DEST_DIR }}
    - name: push to s3 (vue)
      if: env.PUBLISH == 'true' && (steps.changes.outputs.vue == 'true' || steps.changes.outputs.common == 'true')
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET_VUE_V2 }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SOURCE_DIR: 'packages/vue/dist/'
        DEST_DIR: ${{ env.AWS_S3_DEST_DIR }}
    - name: push to s3 (angular)
      if: env.PUBLISH == 'true' && (steps.changes.outputs.angular == 'true' || steps.changes.outputs.common == 'true')
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET_ANGULAR_V2 }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SOURCE_DIR: 'packages/angular/dist/angular/'
        DEST_DIR: ${{ env.AWS_S3_DEST_DIR }}
    - name: Invalidate (react)
      if: env.PUBLISH == 'true' && (steps.changes.outputs.react == 'true' || steps.changes.outputs.common == 'true')
      uses: chetan/invalidate-cloudfront-action@master
      env:
        DISTRIBUTION: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_REACT_V2 }}
        PATHS: ${{ env.AWS_CLOUDFRONT_INVALIDATION_PATHS }}
        AWS_REGION: 'us-east-1'
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - name: Invalidate (vue)
      if: env.PUBLISH == 'true' && (steps.changes.outputs.vue == 'true' || steps.changes.outputs.common == 'true')
      uses: chetan/invalidate-cloudfront-action@master
      env:
        DISTRIBUTION: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_VUE_V2 }}
        PATHS: ${{ env.AWS_CLOUDFRONT_INVALIDATION_PATHS }}
        AWS_REGION: 'us-east-1'
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - name: Invalidate (angular)
      if: env.PUBLISH == 'true' && (steps.changes.outputs.angular == 'true' || steps.changes.outputs.common == 'true')
      uses: chetan/invalidate-cloudfront-action@master
      env:
        DISTRIBUTION: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ANGULAR_V2 }}
        PATHS: ${{ env.AWS_CLOUDFRONT_INVALIDATION_PATHS }}
        AWS_REGION: 'us-east-1'
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
